version: '3.8'

services:
  # Development environment with Jupyter Lab
  qmann-dev:
    build:
      context: .
      target: development
      dockerfile: Dockerfile
    container_name: qmann-development
    ports:
      - "8888:8888"  # Jupyter Lab
      - "8050:8050"  # Dash apps
      - "8080:8080"  # Development server
    volumes:
      - .:/app
      - qmann-cache:/app/quantum_cache
      - jupyter-data:/home/qmann/.jupyter
    environment:
      - QISKIT_IBM_TOKEN=${QISKIT_IBM_TOKEN}
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-qmann2025}
    networks:
      - qmann-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/lab"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Production application server
  qmann-prod:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    container_name: qmann-production
    ports:
      - "8000:8000"
    volumes:
      - qmann-logs:/app/logs
      - qmann-cache:/app/quantum_cache
    environment:
      - QISKIT_IBM_TOKEN=${QISKIT_IBM_TOKEN}
      - QMANN_LOG_LEVEL=${QMANN_LOG_LEVEL:-INFO}
      - QMANN_BACKEND=${QMANN_BACKEND:-qasm_simulator}
    networks:
      - qmann-network
    restart: unless-stopped
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "python", "-c", "import qmann; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Quantum simulation service
  qmann-quantum:
    build:
      context: .
      target: quantum-sim
      dockerfile: Dockerfile
    container_name: qmann-quantum-sim
    volumes:
      - qmann-cache:/app/quantum_cache
      - ./tests:/app/tests
    environment:
      - QISKIT_IBM_TOKEN=${QISKIT_IBM_TOKEN}
      - QMANN_USE_SIMULATOR=true
      - QMANN_MAX_QUBITS=20
    networks:
      - qmann-network
    command: ["python", "-m", "pytest", "tests/", "-v", "--tb=short"]

  # IBM Quantum service
  qmann-ibm:
    build:
      context: .
      target: ibm-quantum
      dockerfile: Dockerfile
    container_name: qmann-ibm-quantum
    volumes:
      - qmann-cache:/app/quantum_cache
      - ibm-quantum-config:/home/qmann/.qiskit
    environment:
      - QISKIT_IBM_TOKEN=${QISKIT_IBM_TOKEN}
      - QISKIT_IBM_CHANNEL=${QISKIT_IBM_CHANNEL:-ibm_quantum}
      - QISKIT_IBM_INSTANCE=${QISKIT_IBM_INSTANCE}
    networks:
      - qmann-network
    restart: unless-stopped

  # GPU-accelerated service (requires NVIDIA Docker)
  qmann-gpu:
    build:
      context: .
      target: gpu
      dockerfile: Dockerfile
    container_name: qmann-gpu
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - CUDA_VISIBLE_DEVICES=0
      - QISKIT_IBM_TOKEN=${QISKIT_IBM_TOKEN}
    volumes:
      - qmann-cache:/app/quantum_cache
      - gpu-models:/app/models
    networks:
      - qmann-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Redis for caching and job queuing
  redis:
    image: redis:7-alpine
    container_name: qmann-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - qmann-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # PostgreSQL for metadata and results storage
  postgres:
    image: postgres:15-alpine
    container_name: qmann-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=qmann
      - POSTGRES_USER=qmann
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-qmann2025}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - qmann-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qmann"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: qmann-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - qmann-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: qmann-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-qmann2025}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - qmann-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: qmann-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx-logs:/var/log/nginx
    networks:
      - qmann-network
    restart: unless-stopped
    depends_on:
      - qmann-prod
      - qmann-dev
      - grafana

  # Testing service
  qmann-test:
    build:
      context: .
      target: quantum-sim
      dockerfile: Dockerfile
    container_name: qmann-test
    volumes:
      - .:/app
      - qmann-cache:/app/quantum_cache
    environment:
      - QISKIT_IBM_TOKEN=${QISKIT_IBM_TOKEN}
      - PYTEST_ARGS=${PYTEST_ARGS:--v --tb=short}
    networks:
      - qmann-network
    command: ["python", "-m", "pytest", "tests/", "-v", "--cov=src/qmann", "--cov-report=html"]
    profiles:
      - testing

  # Minimal runtime for production deployment
  qmann-minimal:
    build:
      context: .
      target: minimal
      dockerfile: Dockerfile
    container_name: qmann-minimal
    environment:
      - QMANN_MODE=minimal
    networks:
      - qmann-network
    restart: unless-stopped
    profiles:
      - minimal

# Networks
networks:
  qmann-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  qmann-cache:
    driver: local
  qmann-logs:
    driver: local
  jupyter-data:
    driver: local
  ibm-quantum-config:
    driver: local
  gpu-models:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-logs:
    driver: local

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
version: '3.8'

# Development-specific overrides
services:
  qmann-dev:
    build:
      target: development
    volumes:
      - .:/app:cached  # Cached mount for better performance on macOS
      - /app/node_modules  # Prevent overwriting node_modules
    environment:
      - QMANN_DEBUG=true
      - QMANN_LOG_LEVEL=DEBUG
    stdin_open: true
    tty: true

# Production override
# Use: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
---
version: '3.8'

# Production-specific overrides
services:
  qmann-prod:
    build:
      target: production
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    environment:
      - QMANN_ENV=production
      - QMANN_LOG_LEVEL=WARNING
    restart: always

  nginx:
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
