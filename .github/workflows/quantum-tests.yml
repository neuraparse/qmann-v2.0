name: Quantum Hardware Tests

on:
  schedule:
    # Run quantum hardware tests twice daily
    - cron: '0 6,18 * * *'
  workflow_dispatch:
    inputs:
      backend:
        description: 'Quantum backend to test'
        required: false
        default: 'ibm_brisbane'
        type: choice
        options:
          - 'ibm_brisbane'
          - 'ibm_kyoto'
          - 'ibm_osaka'
          - 'simulator_mps'
          - 'simulator_statevector'
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'full'
        type: choice
        options:
          - 'full'
          - 'smoke'
          - 'performance'
          - 'error_mitigation'

env:
  PYTHON_VERSION: '3.11'

jobs:
  quantum-hardware-tests:
    runs-on: ubuntu-latest
    if: github.repository == 'qmann-research/qmann'

    strategy:
      fail-fast: false
      matrix:
        backend: 
          - 'ibm_brisbane'
          - 'ibm_kyoto'
          - 'simulator_mps'
        test_type:
          - 'basic'
          - 'error_mitigation'
          - 'performance'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: quantum-${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,quantum,test]"

    - name: Configure IBM Quantum credentials
      env:
        QISKIT_IBM_TOKEN: ${{ secrets.QISKIT_IBM_TOKEN }}
        QISKIT_IBM_CHANNEL: ${{ secrets.QISKIT_IBM_CHANNEL }}
        QISKIT_IBM_INSTANCE: ${{ secrets.QISKIT_IBM_INSTANCE }}
      run: |
        python -c "
        from qiskit_ibm_runtime import QiskitRuntimeService
        import os
        if os.getenv('QISKIT_IBM_TOKEN'):
            QiskitRuntimeService.save_account(
                token=os.getenv('QISKIT_IBM_TOKEN'),
                channel=os.getenv('QISKIT_IBM_CHANNEL', 'ibm_quantum'),
                instance=os.getenv('QISKIT_IBM_INSTANCE'),
                overwrite=True
            )
            print('✓ IBM Quantum credentials configured')
        else:
            print('⚠ No IBM Quantum token provided, using simulators only')
        "

    - name: Check quantum backend availability
      run: |
        python -c "
        from qiskit_ibm_runtime import QiskitRuntimeService
        try:
            service = QiskitRuntimeService()
            backends = service.backends()
            print(f'Available backends: {[b.name for b in backends]}')
            
            backend = service.backend('${{ matrix.backend }}')
            print(f'Backend ${{ matrix.backend }} status: {backend.status()}')
            print(f'Queue length: {backend.status().pending_jobs}')
        except Exception as e:
            print(f'Backend check failed: {e}')
            if 'simulator' not in '${{ matrix.backend }}':
                exit(1)
        "

    - name: Run basic quantum tests
      if: matrix.test_type == 'basic'
      run: |
        pytest tests/quantum/test_basic.py -v \
          --backend=${{ matrix.backend }} \
          --timeout=1800 \
          --maxfail=3

    - name: Run error mitigation tests
      if: matrix.test_type == 'error_mitigation'
      run: |
        pytest tests/quantum/test_error_mitigation.py -v \
          --backend=${{ matrix.backend }} \
          --timeout=3600 \
          --maxfail=2

    - name: Run performance tests
      if: matrix.test_type == 'performance'
      run: |
        pytest tests/quantum/test_performance.py -v \
          --backend=${{ matrix.backend }} \
          --timeout=3600 \
          --benchmark-only \
          --benchmark-json=quantum_benchmark_${{ matrix.backend }}.json

    - name: Upload quantum test results
      uses: actions/upload-artifact@v3
      with:
        name: quantum-test-results-${{ matrix.backend }}-${{ matrix.test_type }}
        path: |
          quantum_benchmark_*.json
          test-results.xml
          quantum_test_logs/

    - name: Store performance benchmarks
      if: matrix.test_type == 'performance'
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: quantum_benchmark_${{ matrix.backend }}.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        benchmark-data-dir-path: 'benchmarks/quantum'

  quantum-integration-tests:
    runs-on: ubuntu-latest
    needs: quantum-hardware-tests
    if: github.repository == 'qmann-research/qmann'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,quantum,applications]"

    - name: Configure IBM Quantum credentials
      env:
        QISKIT_IBM_TOKEN: ${{ secrets.QISKIT_IBM_TOKEN }}
      run: |
        python -c "
        from qiskit_ibm_runtime import QiskitRuntimeService
        import os
        if os.getenv('QISKIT_IBM_TOKEN'):
            QiskitRuntimeService.save_account(
                token=os.getenv('QISKIT_IBM_TOKEN'),
                overwrite=True
            )
        "

    - name: Run healthcare application tests
      run: |
        pytest tests/applications/test_healthcare_quantum.py -v \
          --timeout=3600 \
          --maxfail=1

    - name: Run industrial application tests
      run: |
        pytest tests/applications/test_industrial_quantum.py -v \
          --timeout=3600 \
          --maxfail=1

    - name: Run autonomous systems tests
      run: |
        pytest tests/applications/test_autonomous_quantum.py -v \
          --timeout=3600 \
          --maxfail=1

    - name: Generate quantum test report
      run: |
        python scripts/generate_quantum_report.py \
          --output-dir=quantum_reports/ \
          --include-benchmarks

    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      with:
        name: quantum-integration-results
        path: |
          quantum_reports/
          integration_test_logs/

  quantum-noise-analysis:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,quantum,analysis]"

    - name: Configure IBM Quantum credentials
      env:
        QISKIT_IBM_TOKEN: ${{ secrets.QISKIT_IBM_TOKEN }}
      run: |
        python -c "
        from qiskit_ibm_runtime import QiskitRuntimeService
        import os
        if os.getenv('QISKIT_IBM_TOKEN'):
            QiskitRuntimeService.save_account(
                token=os.getenv('QISKIT_IBM_TOKEN'),
                overwrite=True
            )
        "

    - name: Analyze quantum noise characteristics
      run: |
        python scripts/analyze_quantum_noise.py \
          --backends ibm_brisbane,ibm_kyoto \
          --output-dir=noise_analysis/ \
          --duration=1800

    - name: Generate noise analysis report
      run: |
        python scripts/generate_noise_report.py \
          --input-dir=noise_analysis/ \
          --output=noise_analysis_report.html

    - name: Upload noise analysis results
      uses: actions/upload-artifact@v3
      with:
        name: quantum-noise-analysis
        path: |
          noise_analysis/
          noise_analysis_report.html

  notify-quantum-results:
    runs-on: ubuntu-latest
    needs: [quantum-hardware-tests, quantum-integration-tests, quantum-noise-analysis]
    if: always()

    steps:
    - name: Notify on quantum test completion
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        if [ "${{ needs.quantum-hardware-tests.result }}" == "success" ]; then
          echo "✅ Quantum hardware tests completed successfully"
        else
          echo "❌ Quantum hardware tests failed"
        fi
        
        if [ "${{ needs.quantum-integration-tests.result }}" == "success" ]; then
          echo "✅ Quantum integration tests completed successfully"
        else
          echo "❌ Quantum integration tests failed"
        fi
