name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'

env:
  PYTHON_VERSION: '3.11'

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep

    - name: Run Safety check for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report

    - name: Run Bandit security linter
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: |
          safety-report.json
          bandit-report.json

  code-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Semgrep
      run: |
        python -m pip install semgrep

    - name: Run Semgrep security analysis
      run: |
        semgrep --config=auto --json --output=semgrep-report.json src/ || true
        semgrep --config=auto src/

    - name: Upload Semgrep results
      uses: actions/upload-artifact@v3
      with:
        name: semgrep-results
        path: semgrep-report.json

  quantum-security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,quantum,security]"

    - name: Run quantum-specific security checks
      run: |
        python scripts/quantum_security_scan.py \
          --output-dir=quantum_security/ \
          --check-credentials \
          --check-circuits \
          --check-data-leakage

    - name: Check for quantum credential exposure
      run: |
        # Check for exposed IBM Quantum tokens
        grep -r "QISKIT_IBM_TOKEN" src/ || true
        grep -r "qiskit.*token" src/ || true
        
        # Check for hardcoded quantum backend URLs
        grep -r "quantum-computing.ibm.com" src/ || true
        
        # Check for exposed quantum circuit data
        find src/ -name "*.qasm" -o -name "*.qpy" | head -10

    - name: Validate quantum circuit security
      run: |
        python -c "
        import os
        from qmann.utils.security import QuantumSecurityValidator
        
        validator = QuantumSecurityValidator()
        
        # Scan for potential quantum information leakage
        results = validator.scan_codebase('src/')
        
        if results['high_risk_issues']:
            print('‚ùå High-risk quantum security issues found:')
            for issue in results['high_risk_issues']:
                print(f'  - {issue}')
            exit(1)
        else:
            print('‚úÖ No high-risk quantum security issues found')
        "

    - name: Upload quantum security results
      uses: actions/upload-artifact@v3
      with:
        name: quantum-security-results
        path: quantum_security/

  container-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t qmann:security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'qmann:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Docker security scan
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $(pwd):/src \
          aquasec/trivy image qmann:security-scan \
          --format json --output /src/docker-security.json

    - name: Upload Docker security results
      uses: actions/upload-artifact@v3
      with:
        name: docker-security-results
        path: docker-security.json

  secrets-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog secrets scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Run GitLeaks secrets scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  license-compliance:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install license checking tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses licensecheck

    - name: Check Python package licenses
      run: |
        pip install -e .
        pip-licenses --format=json --output-file=python-licenses.json
        pip-licenses --format=plain

    - name: Validate license compatibility
      run: |
        python scripts/check_license_compatibility.py \
          --input=python-licenses.json \
          --allowed-licenses=Apache-2.0,MIT,BSD-3-Clause,BSD-2-Clause \
          --output=license-compliance-report.json

    - name: Upload license compliance results
      uses: actions/upload-artifact@v3
      with:
        name: license-compliance-results
        path: |
          python-licenses.json
          license-compliance-report.json

  security-report:
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-analysis, quantum-security-scan, container-security, secrets-scan, license-compliance]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all security artifacts
      uses: actions/download-artifact@v3

    - name: Generate comprehensive security report
      run: |
        python scripts/generate_security_report.py \
          --input-dir=. \
          --output=comprehensive-security-report.html \
          --format=html

    - name: Upload comprehensive security report
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-security-report
        path: comprehensive-security-report.html

    - name: Check security status
      run: |
        echo "Security scan summary:"
        echo "- Dependency scan: ${{ needs.dependency-scan.result }}"
        echo "- Code analysis: ${{ needs.code-analysis.result }}"
        echo "- Quantum security: ${{ needs.quantum-security-scan.result }}"
        echo "- Container security: ${{ needs.container-security.result }}"
        echo "- Secrets scan: ${{ needs.secrets-scan.result }}"
        echo "- License compliance: ${{ needs.license-compliance.result }}"
        
        if [[ "${{ needs.dependency-scan.result }}" == "failure" || 
              "${{ needs.code-analysis.result }}" == "failure" || 
              "${{ needs.quantum-security-scan.result }}" == "failure" ]]; then
          echo "‚ùå Critical security issues detected"
          exit 1
        else
          echo "‚úÖ Security scans completed successfully"
        fi

  notify-security:
    runs-on: ubuntu-latest
    needs: security-report
    if: failure()
    
    steps:
    - name: Notify security team
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"üö® Security scan failed for QMANN repository. Please review immediately."}' \
          $SLACK_WEBHOOK_URL
