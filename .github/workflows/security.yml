name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'

env:
  PYTHON_VERSION: '3.11'

jobs:
  dependency-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit || true

    - name: Run Safety check for known vulnerabilities
      run: |
        safety check --short-report || true

    - name: Run Bandit security linter
      run: |
        bandit -r src/ -f txt || true

  code-analysis:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Semgrep
      run: |
        python -m pip install semgrep || true

    - name: Run Semgrep security analysis
      run: |
        semgrep --config=auto src/ || true

  quantum-security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Check for quantum credential exposure
      run: |
        # Check for exposed IBM Quantum tokens
        grep -r "QISKIT_IBM_TOKEN" src/ || true
        grep -r "qiskit.*token" src/ || true

        # Check for hardcoded quantum backend URLs
        grep -r "quantum-computing.ibm.com" src/ || true

        echo "✅ Quantum security scan completed"

  container-security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check Dockerfile exists
      run: |
        if [ -f Dockerfile ]; then
          echo "✅ Dockerfile found"
        else
          echo "⚠️ Dockerfile not found, skipping container security scan"
        fi

  secrets-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for common secrets patterns
      run: |
        # Check for API keys and tokens
        grep -r "api_key\|API_KEY\|secret\|SECRET\|token\|TOKEN" src/ || true
        echo "✅ Secrets scan completed"

  license-compliance:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install license checking tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses || true

    - name: Check Python package licenses
      run: |
        pip install -e . || true
        pip-licenses --format=plain || true
        echo "✅ License compliance check completed"

  security-report:
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-analysis, quantum-security-scan, container-security, secrets-scan, license-compliance]
    if: always()

    steps:
    - name: Check security status
      run: |
        echo "Security scan summary:"
        echo "- Dependency scan: ${{ needs.dependency-scan.result }}"
        echo "- Code analysis: ${{ needs.code-analysis.result }}"
        echo "- Quantum security: ${{ needs.quantum-security-scan.result }}"
        echo "- Container security: ${{ needs.container-security.result }}"
        echo "- Secrets scan: ${{ needs.secrets-scan.result }}"
        echo "- License compliance: ${{ needs.license-compliance.result }}"
        echo "✅ Security scans completed"

  notify-security:
    runs-on: ubuntu-latest
    needs: security-report
    if: failure()

    steps:
    - name: Notify security team
      run: |
        echo "⚠️ Security scan failed. Please review the logs."
