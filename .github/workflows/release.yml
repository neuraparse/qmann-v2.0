name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v2.0.1)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Validate version format
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
          IS_PRERELEASE="false"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        
        # Validate semantic versioning
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          exit 1
        fi
        
        echo "✅ Valid version: $VERSION"

    - name: Check if version exists
      run: |
        if git tag -l | grep -q "^${{ steps.version.outputs.version }}$"; then
          echo "❌ Version ${{ steps.version.outputs.version }} already exists"
          exit 1
        fi

  run-tests:
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test,quantum]"

    - name: Run comprehensive test suite
      run: |
        pytest tests/ -v --cov=qmann --cov-report=xml --maxfail=5

    - name: Run security scans
      run: |
        bandit -r src/ -f json -o bandit-report.json
        safety check --json --output safety-report.json

    - name: Validate package build
      run: |
        python -m build
        twine check dist/*

  build-artifacts:
    runs-on: ${{ matrix.os }}
    needs: [validate-release, run-tests]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-${{ matrix.os }}
        path: dist/

  build-docker:
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          qmann/qmann
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  generate-changelog:
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git tag --sort=-version:refname | head -2 | tail -1)
        CURRENT_TAG="${{ needs.validate-release.outputs.version }}"
        
        echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"
        
        # Generate changelog
        CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
        
        # Save changelog to file and output
        echo "$CHANGELOG" > RELEASE_CHANGELOG.md
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Upload changelog
      uses: actions/upload-artifact@v3
      with:
        name: changelog
        path: RELEASE_CHANGELOG.md

  create-release:
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests, build-artifacts, build-docker, generate-changelog]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-ubuntu-latest
        path: dist/

    - name: Download changelog
      uses: actions/download-artifact@v3
      with:
        name: changelog

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        name: QMANN ${{ needs.validate-release.outputs.version }}
        body_path: RELEASE_CHANGELOG.md
        prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
        files: |
          dist/*.tar.gz
          dist/*.whl
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: ${{ needs.validate-release.outputs.is_prerelease == 'false' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install publishing dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/*

    - name: Test installation from Test PyPI
      run: |
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ qmann
        python -c "import qmann; print(f'✅ QMANN {qmann.__version__} installed successfully')"

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  update-documentation:
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,docs]"

    - name: Build documentation
      run: |
        cd docs
        make html

    - name: Deploy documentation
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html
        destination_dir: ${{ needs.validate-release.outputs.version }}

  notify-release:
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, publish-pypi, update-documentation]
    if: always()
    
    steps:
    - name: Notify on successful release
      if: ${{ needs.create-release.result == 'success' }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{
            "text": "🚀 QMANN ${{ needs.validate-release.outputs.version }} has been released successfully!",
            "attachments": [
              {
                "color": "good",
                "fields": [
                  {
                    "title": "Version",
                    "value": "${{ needs.validate-release.outputs.version }}",
                    "short": true
                  },
                  {
                    "title": "PyPI",
                    "value": "https://pypi.org/project/qmann/",
                    "short": true
                  },
                  {
                    "title": "GitHub Release",
                    "value": "https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}",
                    "short": false
                  }
                ]
              }
            ]
          }' \
          $SLACK_WEBHOOK_URL

    - name: Notify on failed release
      if: ${{ needs.create-release.result == 'failure' }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{
            "text": "❌ QMANN ${{ needs.validate-release.outputs.version }} release failed!",
            "attachments": [
              {
                "color": "danger",
                "text": "Please check the GitHub Actions logs for details."
              }
            ]
          }' \
          $SLACK_WEBHOOK_URL
