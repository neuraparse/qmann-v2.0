[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "qmann"
version = "2.0.0"
description = "Quantum Memory-Augmented Neural Networks - 2025 Implementation"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "QMANN Research Team", email = "qmann@research.org"}
]
maintainers = [
    {name = "QMANN Research Team", email = "qmann@research.org"}
]
keywords = ["quantum computing", "machine learning", "neural networks", "memory augmentation", "NISQ", "quantum memory", "hybrid AI"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Operating System :: OS Independent",
    "Environment :: GPU :: NVIDIA CUDA",
]
requires-python = ">=3.10"
dependencies = [
    "qiskit>=2.1.0",
    "qiskit-ibm-runtime>=0.30.0",
    "qiskit-algorithms>=0.3.1",
    "qiskit-aer>=0.15.1",
    "torch>=2.4.0",
    "numpy>=1.26.0",
    "scipy>=1.13.0",
    "matplotlib>=3.9.0",
    "seaborn>=0.13.0",
    "plotly>=5.18.0",
    "pandas>=2.2.0",
    "scikit-learn>=1.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-cov>=5.0.0",
    "pytest-benchmark>=4.0.0",
    "black>=24.8.0",
    "flake8>=7.1.0",
    "mypy>=1.11.0",
    "jupyter>=1.1.0",
]
test = [
    "pytest>=8.3.0",
    "pytest-cov>=5.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.3.0",
]
security = [
    "safety>=3.2.0",
    "bandit>=1.7.0",
    "semgrep>=1.45.0",
    "pip-licenses>=4.3.0",
]
benchmark = [
    "pytest-benchmark>=4.0.0",
    "memory-profiler>=0.61.0",
    "psutil>=6.0.0",
]
quantum = [
    "pennylane>=0.37.0",
    "cirq>=1.4.0",
    "mitiq>=0.38.0",
]
gpu = [
    "cupy-cuda12x>=13.2.0",
    "jax>=0.4.30",
    "jaxlib>=0.4.30",
]
docs = [
    "sphinx>=7.4.0",
    "sphinx-rtd-theme>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/neuraparse/qmann-v2.0"
Documentation = "https://qmann.readthedocs.io"
Repository = "https://github.com/neuraparse/qmann-v2.0"
Issues = "https://github.com/neuraparse/qmann-v2.0/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
qmann = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = false
warn_unused_configs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
ignore_missing_imports = true
allow_untyped_calls = true
allow_untyped_defs = true
disable_error_code = ["assignment", "return-value", "arg-type", "attr-defined", "override", "misc", "index", "operator", "call-overload", "var-annotated", "has-type", "valid-type", "safe-super", "union-attr"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=src/qmann --cov-report=html --cov-report=term-missing --tb=short"
markers = [
    "hardware: marks tests as requiring quantum hardware (deselect with '-m \"not hardware\"')",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow running",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
