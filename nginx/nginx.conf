# QMANN Nginx Configuration
# High-performance reverse proxy for quantum computing workloads

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Optimize for quantum computing workloads
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=quantum:10m rate=1r/s;

    # Upstream servers
    upstream qmann_app {
        least_conn;
        server qmann-prod:8080 max_fails=3 fail_timeout=30s;
        server qmann-dev:8080 backup;
        keepalive 32;
    }

    upstream qmann_quantum {
        least_conn;
        server qmann-quantum:8081 max_fails=2 fail_timeout=60s;
        keepalive 16;
    }

    upstream qmann_gpu {
        least_conn;
        server qmann-gpu:8082 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    upstream jupyter {
        server qmann-dev:8888;
        keepalive 8;
    }

    upstream grafana {
        server grafana:3000;
        keepalive 8;
    }

    upstream prometheus {
        server prometheus:9090;
        keepalive 8;
    }

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Main QMANN application server
    server {
        listen 80;
        listen [::]:80;
        server_name qmann.local localhost;

        # Redirect HTTP to HTTPS in production
        # return 301 https://$server_name$request_uri;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Main application
        location / {
            proxy_pass http://qmann_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts for quantum operations
            proxy_connect_timeout 30s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # Rate limiting
            limit_req zone=api burst=20 nodelay;
        }

        # API endpoints
        location /api/ {
            proxy_pass http://qmann_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # API-specific timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Rate limiting for API
            limit_req zone=api burst=10 nodelay;
        }

        # Quantum computing endpoints
        location /quantum/ {
            proxy_pass http://qmann_quantum;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Extended timeouts for quantum operations
            proxy_connect_timeout 60s;
            proxy_send_timeout 600s;
            proxy_read_timeout 600s;
            
            # Strict rate limiting for quantum operations
            limit_req zone=quantum burst=5 nodelay;
        }

        # GPU acceleration endpoints
        location /gpu/ {
            proxy_pass http://qmann_gpu;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # GPU operation timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 180s;
            proxy_read_timeout 180s;
        }

        # WebSocket support for real-time updates
        location /ws/ {
            proxy_pass http://qmann_app;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket timeouts
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
        }

        # Static files
        location /static/ {
            alias /var/www/qmann/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            gzip_static on;
        }

        # Jupyter Lab
        location /jupyter/ {
            proxy_pass http://jupyter/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support for Jupyter
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Jupyter timeouts
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
        }

        # Monitoring endpoints
        location /grafana/ {
            proxy_pass http://grafana/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /prometheus/ {
            proxy_pass http://prometheus/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Metrics endpoint
        location /metrics {
            proxy_pass http://qmann_app/metrics;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Restrict access to monitoring systems
            allow 172.20.0.0/16;  # Docker network
            allow 127.0.0.1;      # Localhost
            deny all;
        }
    }

    # HTTPS server (production)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name qmann.local;

        # SSL certificates
        ssl_certificate /etc/nginx/ssl/qmann.crt;
        ssl_certificate_key /etc/nginx/ssl/qmann.key;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Same location blocks as HTTP server
        # ... (copy all location blocks from above)
    }
}
